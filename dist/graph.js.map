{
  "version": 3,
  "sources": ["../src/graph.ts"],
  "sourcesContent": ["/// <reference types=\"../types/graph.d.ts\" />\nexport type Graph = Map<string, Set<string>>;\n\n/**\n* Given a graph and a starting node, return a set of all nodes that can be reached from the starting node, searching breadth-first. Handles cycles by remembering which nodes have been visited.\n*/\nexport function searchBreadth(graph: Graph, start: string): Set<string> {\n  const stack = [];\n  const visited = new Set<string>();\n  const result = new Set<string>();\n  stack.push(start);\n  while (stack.length > 0) {\n    const node = stack.pop()!;\n    if (!visited.has(node)) {\n      visited.add(node);\n      result.add(node);\n      const adjacents = graph.get(node);\n      if (adjacents) {\n        for (const adjacent of adjacents) {\n          stack.push(adjacent);\n        }\n      }\n    }\n  }\n  return result;\n}\n"],
  "mappings": "AAMO,gBAAS,cAAcA,EAAcC,EAA4B,CACtE,MAAMC,EAAQ,CAAC,EACTC,EAAU,IAAI,IACdC,EAAS,IAAI,IAEnB,IADAF,EAAM,KAAKD,CAAK,EACTC,EAAM,OAAS,GAAG,CACvB,MAAMG,EAAOH,EAAM,IAAI,EACvB,GAAI,CAACC,EAAQ,IAAIE,CAAI,EAAG,CACtBF,EAAQ,IAAIE,CAAI,EAChBD,EAAO,IAAIC,CAAI,EACf,MAAMC,EAAYN,EAAM,IAAIK,CAAI,EAChC,GAAIC,EACF,UAAWC,KAAYD,EACrBJ,EAAM,KAAKK,CAAQ,GAK3B,OAAOH,CACT",
  "names": ["graph", "start", "stack", "visited", "result", "node", "adjacents", "adjacent"]
}
